import cv2
import numpy as np
from PIL import Image, ImageDraw, ImageFont
import os
from heapq import heappush, heappop
from skimage.morphology import skeletonize
try:
    import pillow_heif
except ImportError:  # pragma: no cover
    pillow_heif = None
try:
    from rembg import remove
except ImportError:  # pragma: no cover
    remove = None

# HEIC対応読み込み
def load_image(path):
    ext = os.path.splitext(path)[-1].lower()
    if ext == ".heic":
        if pillow_heif is None:
            raise ImportError("pillow_heif is required to load HEIC images")
        heif_file = pillow_heif.read_heif(path)
        img = Image.frombytes(heif_file.mode, heif_file.size, heif_file.data, "raw")
        return cv2.cvtColor(np.array(img), cv2.COLOR_RGB2BGR)
    else:
        return cv2.imread(path)

# 黒四角マーカー検出
def detect_marker(image, marker_size_cm=5.0):
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    _, thresh = cv2.threshold(gray, 50, 255, cv2.THRESH_BINARY_INV)
    contours, _ = cv2.findContours(thresh, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

    cm_per_pixel = None
    best_cnt = None
    max_area = 0

    for cnt in contours:
        area = cv2.contourArea(cnt)
        if area > 500:  # ノイズ除去
            x, y, w, h = cv2.boundingRect(cnt)
            aspect_ratio = w / float(h)
            if 0.9 < aspect_ratio < 1.1 and area > max_area:
                max_area = area
                best_cnt = cnt

    if best_cnt is not None:
        x, y, w, h = cv2.boundingRect(best_cnt)
        cm_per_pixel = marker_size_cm / np.mean([w, h])
        cv2.rectangle(image, (x, y), (x + w, y + h), (0, 0, 255), 2)
        cv2.putText(image, "Marker", (x, y - 10),
                    cv2.FONT_HERSHEY_SIMPLEX, 0.6, (0, 0, 255), 2)
    return cm_per_pixel

# 背景除去
def remove_background(image):
    if remove is None:
        raise ImportError("rembg is required for background removal")
    result = remove(image)
    return cv2.cvtColor(np.array(result), cv2.COLOR_RGBA2BGR)


def _nearest_skeleton_point(skeleton, point):
    """Return the skeleton pixel closest to ``point``.

    Parameters
    ----------
    skeleton : ndarray
        Binary skeleton image.
    point : tuple
        ``(x, y)`` coordinate.
    """
    ys, xs = np.nonzero(skeleton)
    if xs.size == 0:
        raise ValueError("Skeleton is empty")
    dists = (xs - point[0]) ** 2 + (ys - point[1]) ** 2
    idx = np.argmin(dists)
    return int(xs[idx]), int(ys[idx])


def _shortest_path_length(skeleton, start, end):
    """Compute shortest path length between two points on a skeleton."""
    height, width = skeleton.shape
    visited = np.zeros((height, width), dtype=bool)
    dist = np.full((height, width), np.inf)
    sx, sy = start
    ex, ey = end
    dist[sy, sx] = 0.0
    heap = [(0.0, sx, sy)]
    neighbors = [
        (-1, -1), (0, -1), (1, -1),
        (-1, 0),           (1, 0),
        (-1, 1),  (0, 1),  (1, 1),
    ]
    while heap:
        d, x, y = heappop(heap)
        if visited[y, x]:
            continue
        if (x, y) == (ex, ey):
            return d
        visited[y, x] = True
        for dx, dy in neighbors:
            nx, ny = x + dx, y + dy
            if 0 <= nx < width and 0 <= ny < height and skeleton[ny, nx]:
                step = 1.41421356 if dx != 0 and dy != 0 else 1.0
                nd = d + step
                if nd < dist[ny, nx]:
                    dist[ny, nx] = nd
                    heappush(heap, (nd, nx, ny))
    return np.inf

# 服計測
def measure_clothes(image, cm_per_pixel):
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    _, thresh = cv2.threshold(gray, 10, 255, cv2.THRESH_BINARY)
    # ノイズ除去のためのクロージング処理
    kernel = np.ones((5, 5), np.uint8)
    thresh = cv2.morphologyEx(thresh, cv2.MORPH_CLOSE, kernel)
    contours, _ = cv2.findContours(thresh, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

    if not contours:
        return None, {}

    clothes_contour = max(contours, key=cv2.contourArea)

    # 凸包で輪郭を滑らかにする
    hull = cv2.convexHull(clothes_contour)
    x, y, w, h = cv2.boundingRect(hull)


    # 二値マスクから胴体中央線を推定
    mask = np.zeros_like(gray)
    cv2.drawContours(mask, [clothes_contour], -1, 255, thickness=-1)
    projection = mask.sum(axis=0)
    center_x = int(np.argmax(projection))
    column_pixels = np.where(mask[:, center_x] > 0)[0]
    if column_pixels.size == 0:
        raise ValueError("Center line not found")
    top_y = int(column_pixels.min())
    bottom_y = int(column_pixels.max())

    ys = clothes_contour[:, :, 1]
    xs = clothes_contour[:, :, 0]
    min_x = int(xs.min())
    max_x = int(xs.max())
    min_y = int(ys.min())
    max_y = int(ys.max())
    w = max_x - min_x + 1
    height = bottom_y - top_y

    # 肩幅（上から10%の位置での幅）
    shoulder_y = min_y + int(height * 0.1)
    shoulder_line = gray[shoulder_y:shoulder_y+5, min_x:min_x+w]
    shoulder_points = cv2.findNonZero(shoulder_line)
    if shoulder_points is None:
        raise ValueError("Shoulder line not detected")
    shoulder_xs = shoulder_points[:, 0, 0]
    shoulder_ys = shoulder_points[:, 0, 1]
    left_idx = np.argmin(shoulder_xs)
    right_idx = np.argmax(shoulder_xs)
    left_shoulder = (min_x + shoulder_xs[left_idx], shoulder_y + shoulder_ys[left_idx])
    right_shoulder = (min_x + shoulder_xs[right_idx], shoulder_y + shoulder_ys[right_idx])
    shoulder_width = right_shoulder[0] - left_shoulder[0]


    # 身幅（下から30%）
    chest_y = y + int(h * 0.7)
    chest_line = gray[chest_y:chest_y+5, x:x+w]

    chest_points = cv2.findNonZero(chest_line)
    if chest_points is None:
        raise ValueError("Chest line not detected")
    chest_xs = chest_points[:, 0, 0]
    left_chest = min_x + chest_xs.min()
    right_chest = min_x + chest_xs.max()
    chest_width = right_chest - left_chest

    # 袖端（肩点から最も遠い輪郭点）
    contour_points = clothes_contour[:, 0, :]
    left_points = contour_points[contour_points[:, 0] <= center_x]
    right_points = contour_points[contour_points[:, 0] > center_x]
    if left_points.size == 0 or right_points.size == 0:
        raise ValueError("Sleeve contour not detected")

    left_dists = np.linalg.norm(left_points - np.array(left_shoulder), axis=1)
    right_dists = np.linalg.norm(right_points - np.array(right_shoulder), axis=1)
    left_sleeve_end = tuple(left_points[np.argmax(left_dists)])
    right_sleeve_end = tuple(right_points[np.argmax(right_dists)])

    # 袖部分の骨格抽出
    skeleton = skeletonize(mask > 0)
    left_start = _nearest_skeleton_point(skeleton, left_shoulder)
    left_end = _nearest_skeleton_point(skeleton, left_sleeve_end)
    right_start = _nearest_skeleton_point(skeleton, right_shoulder)
    right_end = _nearest_skeleton_point(skeleton, right_sleeve_end)

    left_sleeve_length = _shortest_path_length(skeleton, left_start, left_end)
    right_sleeve_length = _shortest_path_length(skeleton, right_start, right_end)
    sleeve_length = (left_sleeve_length + right_sleeve_length) / 2


    # 身丈（中央線と輪郭の交点間の距離）
    body_length = bottom_y - top_y


    measures = {
        "肩幅": shoulder_width * cm_per_pixel,
        "身幅": chest_width * cm_per_pixel,
        "身丈": body_length * cm_per_pixel,
        "袖丈": sleeve_length * cm_per_pixel,
    }
    return hull, measures

def _load_japanese_font(font_path, font_size):
    """Return a Pillow font object suitable for rendering Japanese text.

    The function tries several fallback locations so that typical Linux and
    macOS installations work out of the box:

    1. The ``font_path`` argument, if provided.
    2. The ``JP_FONT_PATH`` environment variable.
    3. Common system fonts such as Noto Sans CJK (Linux) or Hiragino/Kosugi
       (macOS).
    4. Finally, Pillow's default bitmap font.
    """

    candidates = []
    if font_path:
        candidates.append(font_path)
    else:
        env_font = os.getenv("JP_FONT_PATH")
        if env_font:
            candidates.append(env_font)
        candidates.extend([
            "/usr/share/fonts/truetype/noto/NotoSansCJK-Regular.ttc",  # Linux
            "/System/Library/Fonts/ヒラギノ角ゴシック W3.ttc",       # macOS
            "/Library/Fonts/Kosugi-Regular.ttf",                       # macOS user font
        ])

    for path in candidates:
        if path and os.path.exists(path):
            try:
                return ImageFont.truetype(path, size=font_size), font_size
            except OSError:
                continue

    # Fall back to Pillow's default font which may not support Japanese
    return ImageFont.load_default(), 20

# 画像に寸法描画
def draw_measurements_on_image(image, measurements, font_path=None, font_size=150):
    """Draw measurement labels on an image using a Japanese-capable font.

    The overlay text defaults to a large 150 px font so measurements remain
    clearly visible on high-resolution images. When a custom font cannot be
    loaded and Pillow's built-in fallback is used instead, the size is reduced
    to 20 px to match that font's limited metrics.

    Parameters
    ----------
    image : numpy.ndarray
        BGR image as used by OpenCV.
    measurements : dict
        Dictionary mapping measurement names to values.
    font_path : str, optional
        Path to a TrueType font capable of rendering Japanese. When omitted,
        the function searches in the following order:

        1. The ``JP_FONT_PATH`` environment variable
        2. Common system fonts (Noto Sans CJK on Linux, Hiragino/Kosugi on
           macOS)
        3. Pillow's bundled bitmap font, which may lack Japanese glyphs
    font_size : int, optional
        Base font size to use for rendering measurement labels. Defaults to
        150 px and is also used to derive line spacing.
    """

    # Resolve a Japanese-capable font. When no suitable font can be found,
    # Pillow's default bitmap font is used and the size is reduced for better
    # readability.
    font, font_size = _load_japanese_font(font_path, font_size)

    pil_img = Image.fromarray(cv2.cvtColor(image, cv2.COLOR_BGR2RGB))
    draw = ImageDraw.Draw(pil_img)


    y_offset = 30
    line_height = font_size + 20
    for key, value in measurements.items():
        text = f"{key}: {value:.1f} cm"
        draw.text((30, y_offset), text, font=font, fill=(0, 255, 0))
        y_offset += line_height


    return cv2.cvtColor(np.array(pil_img), cv2.COLOR_RGB2BGR)

if __name__ == "__main__":
    # ===== メイン処理 =====
    image_path = "画像.jpg"  # HEICもJPEGもOK
    img = load_image(image_path)

    # マーカー検出（背景除去前）
    cm_per_pixel = detect_marker(img)
    if cm_per_pixel is None:
        print("マーカーが検出できません。終了します。")
        exit()

    # 背景除去
    img_no_bg = remove_background(img)

    # 服計測
    try:
        contour, measurements = measure_clothes(img_no_bg, cm_per_pixel)
    except ValueError as e:
        print(f"計測エラー: {e}")
        exit()
    if contour is None:
        print("服が検出できません。")
        exit()

    # 寸法表示
    for k, v in measurements.items():
        print(f"{k}: {v:.1f} cm")

    font_path = os.getenv("JP_FONT_PATH")
    img_with_text = draw_measurements_on_image(
        img.copy(), measurements, font_path=font_path, font_size=200
    )
    cv2.drawContours(img_with_text, [contour], -1, (255, 0, 0), 2)

    # 保存
    cv2.imwrite("clothes_with_measurements.jpg", img_with_text)
    print("寸法入り画像を保存しました → clothes_with_measurements.jpg")

